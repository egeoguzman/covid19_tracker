{"ast":null,"code":"var _jsxFileName = \"/Users/egeoguzman/Desktop/covid-19_tracker/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api/';\nimport styles from './Chart.module.css';\nimport { Line, Bar } from 'react-chartjs-2';\n\nfunction Chart({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData((await fetchDailyData()));\n    };\n\n    fetchAPI();\n  }, []);\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255,0,0,0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }) : null;\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \"data=\", {\n    labels: ['Infected', 'Recovered', 'Deaths'],\n    datasets: [{\n      label: 'People',\n      backgroundColor: ['rgba(128, 0, 128, 0.5)', 'rgba(0, 255, 0, 1)', 'rgba(255, 0, 0, 1)'],\n      data: [confirmed.value, recovered.value, deaths.value]\n    }]\n  }, \"options=\", {\n    legend: {\n      display: false\n    },\n    title: {\n      display: true,\n      text: `Current state in ${country}`\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, country ? barChart : lineChart);\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/egeoguzman/Desktop/covid-19_tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","styles","Line","Bar","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","value","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,SAAQC,IAAR,EAAeC,GAAf,QAAyB,iBAAzB;;AAGA,SAASC,KAAT,CAAe;AAACC,EAAAA,IAAI,EAAE;AAACC,IAAAA,SAAD;AAAWC,IAAAA,SAAX;AAAqBC,IAAAA;AAArB,GAAP;AAAoCC,EAAAA;AAApC,CAAf,EAA6D;AACzD,QAAM,CAACC,SAAD,EAAWC,YAAX,IAA2Bb,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,QAAQ,GAAG,YAAY;AACzBD,MAAAA,YAAY,EAAC,MAAMX,cAAc,EAArB,EAAZ;AACH,KAFD;;AAGAY,IAAAA,QAAQ;AACX,GALQ,EAKP,EALO,CAAT;AAOA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,gBACI,oBAAC,IAAD;AACA,IAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADN;AAEFC,MAAAA,QAAQ,EAAE,CAAC;AACPb,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEV,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADC;AAEPa,QAAAA,KAAK,EAAE,UAFA;AAGPC,QAAAA,WAAW,EAAE,SAHN;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAAD,EAKR;AACEhB,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAER,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADR;AAEEW,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,WAAW,EAAE,KAHf;AAIEE,QAAAA,eAAe,EAAE,mBAJnB;AAKED,QAAAA,IAAI,EAAE;AALR,OALQ;AAFR,KADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,GAkBU,IAnBd;AAuBA,QAAME,QAAQ,GACVjB,SAAS,gBAEL,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACU;AACFS,IAAAA,MAAM,EAAE,CAAC,UAAD,EAAc,WAAd,EAA4B,QAA5B,CADN;AAEFG,IAAAA,QAAQ,EAAE,CAAC;AACPC,MAAAA,KAAK,EAAE,QADA;AAEPG,MAAAA,eAAe,EAAE,CACb,wBADa,EAEb,oBAFa,EAGb,oBAHa,CAFV;AAOPjB,MAAAA,IAAI,EAAC,CAACC,SAAS,CAACkB,KAAX,EAAmBjB,SAAS,CAACiB,KAA7B,EAAqChB,MAAM,CAACgB,KAA5C;AAPE,KAAD;AAFR,GADV,cAea;AACLC,IAAAA,MAAM,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV,KADH;AAELC,IAAAA,KAAK,EAAE;AAACD,MAAAA,OAAO,EAAE,IAAV;AAAeE,MAAAA,IAAI,EAAE,oBAAmBnB,OAAQ;AAAhD;AAFF,GAfb,CAFK,GAwBL,IAzBR;AA4BA,sBACI;AAAK,IAAA,SAAS,EAAER,MAAM,CAAC4B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKpB,OAAO,GAAGc,QAAH,GAAcV,SAD1B,CADJ;AAKH;;AAED,eAAeT,KAAf","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { fetchDailyData } from '../../api/'\nimport styles from './Chart.module.css'\n\nimport {Line , Bar} from 'react-chartjs-2'\n\n\nfunction Chart({data: {confirmed,recovered,deaths},country}) {\n    const [dailyData,setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    },[]);\n\n    const lineChart = (\n        dailyData.length ? (\n            <Line\n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                },{\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true,\n                }],\n\n            }}\n            />) : null\n\n    );\n\n    const barChart = (\n        confirmed\n        ?(\n            <Bar>\n                data={{\n                    labels: ['Infected' , 'Recovered' , 'Deaths'],\n                    datasets: [{\n                        label: 'People' ,\n                        backgroundColor: [\n                            'rgba(128, 0, 128, 0.5)',\n                            'rgba(0, 255, 0, 1)',\n                            'rgba(255, 0, 0, 1)',\n                        ],\n                        data:[confirmed.value , recovered.value , deaths.value]\n                    }]\n\n\n                }}\n                options={{\n                    legend: {display: false},\n                    title: {display: true,text:`Current state in ${country}`},\n                }}\n\n\n            </Bar>\n        ) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}