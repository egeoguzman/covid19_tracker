{"ast":null,"code":"import _regeneratorRuntime from\"/Users/egeoguzman/Desktop/covid-19_tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/egeoguzman/Desktop/covid-19_tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/egeoguzman/Desktop/covid-19_tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{fetchDailyData}from'../../api/';import styles from'./Chart.module.css';import{Line}from'react-chartjs-2';function Chart(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){var fetchAPI=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setDailyData;_context.next=3;return fetchDailyData();case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchAPI(){return _ref.apply(this,arguments);};}();fetchAPI();});var lineChart=dailyData.length?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref2){var date=_ref2.date;return date;}),datasets:[{data:dailyData.map(function(_ref3){var confirmed=_ref3.confirmed;return confirmed;}),label:'Infected',borderColor:'#3333ff',fill:true},{data:dailyData.map(function(_ref4){var deaths=_ref4.deaths;return deaths;}),label:'Deaths',borderColor:'red',backgroundColor:'rgba(255,0,0,0.5)',fill:true}]}}):null;return/*#__PURE__*/React.createElement(\"div\",{className:styles.container},lineChart);}export default Chart;","map":{"version":3,"sources":["/Users/egeoguzman/Desktop/covid-19_tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","styles","Line","Chart","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","data","confirmed","label","borderColor","fill","deaths","backgroundColor","container"],"mappings":"geAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAwBC,SAAxB,KAAwC,OAAxC,CACA,OAASC,cAAT,KAA+B,YAA/B,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CAEA,OAAQC,IAAR,KAAmB,iBAAnB,CAGA,QAASC,CAAAA,KAAT,EAAiB,eACoBL,QAAQ,CAAC,EAAD,CAD5B,wCACNM,SADM,eACIC,YADJ,eAGbN,SAAS,CAAC,UAAM,CACZ,GAAMO,CAAAA,QAAQ,0FAAG,+IACbD,YADa,uBACML,CAAAA,cAAc,EADpB,qHAAH,kBAARM,CAAAA,QAAQ,0CAAd,CAGAA,QAAQ,GACX,CALQ,CAAT,CAOA,GAAMC,CAAAA,SAAS,CACXH,SAAS,CAACI,MAAV,cACI,oBAAC,IAAD,EACA,IAAI,CAAE,CACFC,MAAM,CAAEL,SAAS,CAACM,GAAV,CAAc,mBAAGC,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAAd,CADN,CAEFC,QAAQ,CAAE,CAAC,CACPC,IAAI,CAAET,SAAS,CAACM,GAAV,CAAc,mBAAGI,CAAAA,SAAH,OAAGA,SAAH,OAAmBA,CAAAA,SAAnB,EAAd,CADC,CAEPC,KAAK,CAAE,UAFA,CAGPC,WAAW,CAAE,SAHN,CAIPC,IAAI,CAAE,IAJC,CAAD,CAKR,CACEJ,IAAI,CAAET,SAAS,CAACM,GAAV,CAAc,mBAAGQ,CAAAA,MAAH,OAAGA,MAAH,OAAgBA,CAAAA,MAAhB,EAAd,CADR,CAEEH,KAAK,CAAE,QAFT,CAGEC,WAAW,CAAE,KAHf,CAIEG,eAAe,CAAE,mBAJnB,CAKEF,IAAI,CAAE,IALR,CALQ,CAFR,CADN,EADJ,CAkBU,IAnBd,CAuBA,mBACI,2BAAK,SAAS,CAAEhB,MAAM,CAACmB,SAAvB,EACKb,SADL,CADJ,CAKH,CAED,cAAeJ,CAAAA,KAAf","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport { fetchDailyData } from '../../api/'\nimport styles from './Chart.module.css'\n\nimport {Line} from 'react-chartjs-2'\n\n\nfunction Chart() {\n    const [dailyData,setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    });\n\n    const lineChart = (\n        dailyData.length ? (\n            <Line\n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                },{\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true,\n                }],\n\n            }}\n            />) : null\n\n    );\n\n    return (\n        <div className={styles.container}>\n            {lineChart}\n        </div>\n    )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}